{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041e\u0442\u0447\u0435\u0442\u044b \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c","text":"<p>\u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0438\u043c\u0438 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b.</p> <p>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435</p> <p>\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439\u0441\u044f: \u0420\u0435\u0431\u0440\u043e\u0432 \u0421\u0435\u0440\u0433\u0435\u0439 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447 </p>"},{"location":"LR1/lab/","title":"\u0420\u0430\u0431\u043e\u0442\u0430","text":""},{"location":"LR1/lab/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432. \u0425\u0430\u043a\u0430\u0442\u043e\u043d - \u044d\u0442\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b, \u0434\u0438\u0437\u0430\u0439\u043d\u0435\u0440\u044b \u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0440\u0435\u0448\u0430\u044f \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u043d\u043e\u0432\u044b\u0435 \u0438\u0434\u0435\u0438.</p>"},{"location":"LR1/lab/#_2","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<p>\u0411\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 Participant, Team, Challenge, Submission, Evaluation (\u0441\u043c. \u0444\u0430\u0439\u043b <code>models.py</code>), \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u0445 \u043f\u043e\u0434\u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439.</p> <ul> <li>Participant \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430 \u0438\u043b\u0438 \u0436\u044e\u0440\u0438. \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445 \u0438\u043b\u0438 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0441\u0443\u0434\u044c\u0435\u0439, \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u044b.</li> <li>Team \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u0443\u044e \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432.</li> <li>Challenge \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0438\u043b\u0438 \u043a\u043e\u043d\u043a\u0443\u0440\u0441, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u043e\u0434\u0430\u044e\u0442 \u0441\u0432\u043e\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u043c\u043e\u0436\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043e\u0446\u0435\u043d\u043a\u0438.</li> <li>Submission \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u043f\u043e\u0434\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0447\u0435\u043b\u043b\u0435\u043d\u0434\u0436, \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u043e\u0442 \u0441\u0443\u0434\u0435\u0439.</li> <li>Evaluation \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0443 \u043d\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0441\u0443\u0434\u044c\u0435\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0431\u0430\u043b\u043b \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438.</li> </ul> <p>\u0418 \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u043e API  (\u0441\u043c. \u0444\u0430\u0439\u043b <code>main.py</code>).</p>"},{"location":"LR1/lab/#_3","title":"\u0424\u0430\u0439\u043b\u044b","text":"<p><code>models.py</code></p> <pre><code>class ParticipantTeamLink(SQLModel, table=True):\n    participant_id: Optional[int] = Field(\n        default=None, foreign_key=\"participant.id\", primary_key=True\n    )\n    team_id: Optional[int] = Field(\n        default=None, foreign_key=\"team.id\", primary_key=True\n    )\n    role: str\n    joined_at: datetime = Field(default_factory=datetime.utcnow)\n\n\nclass ParticipantDefault(SQLModel):\n    name: str\n    email: str\n    phone: Optional[str] = None\n\n\nclass Participant(ParticipantDefault, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    teams: List[\"Team\"] = Relationship(\n        back_populates=\"participants\", link_model=ParticipantTeamLink\n    )\n    evaluations: List[\"Evaluation\"] = Relationship(back_populates=\"judge\")\n\n\nclass ParticipantRead(ParticipantDefault):\n    id: int\n    teams: Optional[List[\"TeamRead\"]]\n    evaluations: Optional[List[\"EvaluationRead\"]]\n\n\nclass ParticipantCreateOrUpdate(ParticipantDefault):\n    team_ids: Optional[List[int]] = None\n\n\nclass TeamDefault(SQLModel):\n    name: str\n\n\nclass Team(TeamDefault, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    participants: List[Participant] = Relationship(\n        back_populates=\"teams\", link_model=ParticipantTeamLink\n    )\n    submissions: List[\"Submission\"] = Relationship(back_populates=\"team\")\n\n\nclass TeamRead(TeamDefault):\n    id: int\n    participants: Optional[List[ParticipantRead]]\n\n\nclass TeamCreateOrUpdate(TeamDefault):\n    participant_ids: Optional[List[int]] = None\n\n\nclass ChallengeDefault(SQLModel):\n    title: str\n    description: Optional[str] = None\n    criteria: Optional[str] = None\n\n\nclass Challenge(ChallengeDefault, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    submissions: List[\"Submission\"] = Relationship(back_populates=\"challenge\")\n\n\nclass ChallengeRead(ChallengeDefault):\n    id: int\n    submissions: Optional[List[\"SubmissionRead\"]]\n\n\nclass ChallengeCreateOrUpdate(ChallengeDefault):\n    pass\n\n\nclass SubmissionDefault(SQLModel):\n    team_id: int\n    challenge_id: int\n    file_url: str\n\n\nclass Submission(SubmissionDefault, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    submitted_at: datetime = Field(default_factory=datetime.utcnow)\n    team: Team = Relationship(back_populates=\"submissions\")\n    challenge: Challenge = Relationship(back_populates=\"submissions\")\n    evaluations: List[\"Evaluation\"] = Relationship(back_populates=\"submission\")\n\n\nclass SubmissionRead(SubmissionDefault):\n    id: int\n    submitted_at: datetime\n    team: Optional[TeamRead]\n    challenge: Optional[ChallengeRead]\n    evaluations: Optional[List[\"EvaluationRead\"]]\n\n\nclass SubmissionCreateOrUpdate(SubmissionDefault):\n    pass\n\n\nclass EvaluationDefault(SQLModel):\n    submission_id: int\n    judge_id: int\n    score: float\n    comments: Optional[str] = None\n\n\nclass Evaluation(EvaluationDefault, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    evaluated_at: datetime = Field(default_factory=datetime.utcnow)\n    submission: Submission = Relationship(back_populates=\"evaluations\")\n    judge: Participant = Relationship(back_populates=\"evaluations\")\n\n\nclass EvaluationRead(EvaluationDefault):\n    id: int\n    evaluated_at: datetime\n    submission: Optional[SubmissionRead]\n    judge: Optional[ParticipantRead]\n\n\nclass EvaluationCreateOrUpdate(EvaluationDefault):\n    pass\n</code></pre> <p><code>connection.py</code></p> <pre><code>load_dotenv()\ndb_url = os.getenv(\"DB_ADMIN\")\nengine = create_engine(db_url, echo=True)\n\n\ndef init_db():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre> <p><code>main.py</code></p> <pre><code>app = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    init_db()\n\n\n@app.get(\"/participants\", response_model=List[ParticipantRead])\ndef list_participants(session: Session = Depends(get_session)):\n    return session.exec(select(Participant)).all()\n\n\n@app.post(\"/participants\", response_model=ParticipantRead)\ndef create_participant(\n    data: ParticipantCreateOrUpdate,\n    session: Session = Depends(get_session)\n):\n    participant = Participant(**data.model_dump(exclude_unset=True, exclude={\"team_ids\"}))\n    if data.team_ids:\n        teams = session.exec(select(Team).where(Team.id.in_(data.team_ids))).all()\n        participant.teams = teams\n    session.add(participant)\n    session.commit()\n    session.refresh(participant)\n    return participant\n\n\n@app.get(\"/participants/{participant_id}\", response_model=ParticipantRead)\ndef get_participant(\n    participant_id: int,\n    session: Session = Depends(get_session)\n):\n    participant = session.get(Participant, participant_id)\n    if not participant:\n        raise HTTPException(status_code=404, detail=\"Participant not found\")\n    return participant\n\n\n@app.patch(\"/participants/{participant_id}\", response_model=ParticipantRead)\ndef update_participant(\n    participant_id: int,\n    data: ParticipantCreateOrUpdate,\n    session: Session = Depends(get_session)\n):\n    participant = session.get(Participant, participant_id)\n    if not participant:\n        raise HTTPException(status_code=404, detail=\"Participant not found\")\n    updates = data.model_dump(exclude_unset=True, exclude={\"team_ids\"})\n    for k, v in updates.items():\n        setattr(participant, k, v)\n    if data.team_ids is not None:\n        teams = session.exec(select(Team).where(Team.id.in_(data.team_ids))).all()\n        participant.teams = teams\n    session.add(participant)\n    session.commit()\n    session.refresh(participant)\n    return participant\n\n\n@app.delete(\"/participants/{participant_id}\")\ndef delete_participant(\n    participant_id: int,\n    session: Session = Depends(get_session)\n):\n    participant = session.get(Participant, participant_id)\n    if not participant:\n        raise HTTPException(status_code=404, detail=\"Participant not found\")\n    session.delete(participant)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.get(\"/teams\", response_model=List[TeamRead])\ndef list_teams(session: Session = Depends(get_session)):\n    return session.exec(select(Team)).all()\n\n\n@app.post(\"/teams\", response_model=TeamRead)\ndef create_team(\n    data: TeamCreateOrUpdate,\n    session: Session = Depends(get_session)\n):\n    team = Team(**data.model_dump(exclude_unset=True, exclude={\"participant_ids\"}))\n    if data.participant_ids:\n        participants = session.exec(select(Participant).where(Participant.id.in_(data.participant_ids))).all()\n        team.participants = participants\n    session.add(team)\n    session.commit()\n    session.refresh(team)\n    return team\n\n\n@app.get(\"/teams/{team_id}\", response_model=TeamRead)\ndef get_team(\n    team_id: int,\n    session: Session = Depends(get_session)\n):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    return team\n\n\n@app.patch(\"/teams/{team_id}\", response_model=TeamRead)\ndef update_team(\n    team_id: int,\n    data: TeamCreateOrUpdate,\n    session: Session = Depends(get_session)\n):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    updates = data.model_dump(exclude_unset=True, exclude={\"participant_ids\"})\n    for k, v in updates.items():\n        setattr(team, k, v)\n    if data.participant_ids is not None:\n        participants = session.exec(select(Participant).where(Participant.id.in_(data.participant_ids))).all()\n        team.participants = participants\n    session.add(team)\n    session.commit()\n    session.refresh(team)\n    return team\n\n\n@app.delete(\"/teams/{team_id}\")\ndef delete_team(\n    team_id: int,\n    session: Session = Depends(get_session)\n):\n    team = session.get(Team, team_id)\n    if not team:\n        raise HTTPException(status_code=404, detail=\"Team not found\")\n    session.delete(team)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.get(\"/challenges\", response_model=List[ChallengeRead])\ndef list_challenges(session: Session = Depends(get_session)):\n    return session.exec(select(Challenge)).all()\n\n\n@app.post(\"/challenges\", response_model=ChallengeRead)\ndef create_challenge(\n    data: ChallengeCreateOrUpdate,\n    session: Session = Depends(get_session)\n):\n    challenge = Challenge(**data.model_dump(exclude_unset=True))\n    session.add(challenge)\n    session.commit()\n    session.refresh(challenge)\n    return challenge\n\n\n@app.get(\"/challenges/{challenge_id}\", response_model=ChallengeRead)\ndef get_challenge(\n    challenge_id: int,\n    session: Session = Depends(get_session)\n):\n    challenge = session.get(Challenge, challenge_id)\n    if not challenge:\n        raise HTTPException(status_code=404, detail=\"Challenge not found\")\n    return challenge\n\n\n@app.patch(\"/challenges/{challenge_id}\", response_model=ChallengeRead)\ndef update_challenge(\n    challenge_id: int,\n    data: ChallengeCreateOrUpdate,\n    session: Session = Depends(get_session)\n):\n    challenge = session.get(Challenge, challenge_id)\n    if not challenge:\n        raise HTTPException(status_code=404, detail=\"Challenge not found\")\n    updates = data.model_dump(exclude_unset=True)\n    for k, v in updates.items():\n        setattr(challenge, k, v)\n    session.add(challenge)\n    session.commit()\n    session.refresh(challenge)\n    return challenge\n\n\n@app.delete(\"/challenges/{challenge_id}\")\ndef delete_challenge(\n    challenge_id: int,\n    session: Session = Depends(get_session)\n):\n    challenge = session.get(Challenge, challenge_id)\n    if not challenge:\n        raise HTTPException(status_code=404, detail=\"Challenge not found\")\n    session.delete(challenge)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.get(\"/submissions\", response_model=List[SubmissionRead])\ndef list_submissions(session: Session = Depends(get_session)):\n    return session.exec(select(Submission)).all()\n\n\n@app.post(\"/submissions\", response_model=SubmissionRead)\ndef create_submission(\n    data: SubmissionCreateOrUpdate,\n    session: Session = Depends(get_session)\n):\n    submission = Submission(**data.model_dump(exclude_unset=True))\n    session.add(submission)\n    session.commit()\n    session.refresh(submission)\n    return submission\n\n\n@app.get(\"/submissions/{submission_id}\", response_model=SubmissionRead)\ndef get_submission(\n    submission_id: int,\n    session: Session = Depends(get_session)\n):\n    submission = session.get(Submission, submission_id)\n    if not submission:\n        raise HTTPException(status_code=404, detail=\"Submission not found\")\n    return submission\n\n\n@app.patch(\"/submissions/{submission_id}\", response_model=SubmissionRead)\ndef update_submission(\n    submission_id: int,\n    data: SubmissionCreateOrUpdate,\n    session: Session = Depends(get_session)\n):\n    submission = session.get(Submission, submission_id)\n    if not submission:\n        raise HTTPException(status_code=404, detail=\"Submission not found\")\n    updates = data.model_dump(exclude_unset=True)\n    for k, v in updates.items():\n        setattr(submission, k, v)\n    session.add(submission)\n    session.commit()\n    session.refresh(submission)\n    return submission\n\n\n@app.delete(\"/submissions/{submission_id}\")\ndef delete_submission(\n    submission_id: int,\n    session: Session = Depends(get_session)\n):\n    submission = session.get(Submission, submission_id)\n    if not submission:\n        raise HTTPException(status_code=404, detail=\"Submission not found\")\n    session.delete(submission)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.get(\"/evaluations\", response_model=List[EvaluationRead])\ndef list_evaluations(session: Session = Depends(get_session)):\n    return session.exec(select(Evaluation)).all()\n\n\n@app.post(\"/evaluations\", response_model=EvaluationRead)\ndef create_evaluation(\n    data: EvaluationCreateOrUpdate,\n    session: Session = Depends(get_session)\n):\n    evaluation = Evaluation(**data.model_dump(exclude_unset=True))\n    session.add(evaluation)\n    session.commit()\n    session.refresh(evaluation)\n    return evaluation\n\n\n@app.get(\"/evaluations/{evaluation_id}\", response_model=EvaluationRead)\ndef get_evaluation(\n    evaluation_id: int,\n    session: Session = Depends(get_session)\n):\n    evaluation = session.get(Evaluation, evaluation_id)\n    if not evaluation:\n        raise HTTPException(status_code=404, detail=\"Evaluation not found\")\n    return evaluation\n\n\n@app.patch(\"/evaluations/{evaluation_id}\", response_model=EvaluationRead)\ndef update_evaluation(\n    evaluation_id: int,\n    data: EvaluationCreateOrUpdate,\n    session: Session = Depends(get_session)\n):\n    evaluation = session.get(Evaluation, evaluation_id)\n    if not evaluation:\n        raise HTTPException(status_code=404, detail=\"Evaluation not found\")\n    updates = data.model_dump(exclude_unset=True)\n    for k, v in updates.items():\n        setattr(evaluation, k, v)\n    session.add(evaluation)\n    session.commit()\n    session.refresh(evaluation)\n    return evaluation\n\n\n@app.delete(\"/evaluations/{evaluation_id}\")\ndef delete_evaluation(\n    evaluation_id: int,\n    session: Session = Depends(get_session)\n):\n    evaluation = session.get(Evaluation, evaluation_id)\n    if not evaluation:\n        raise HTTPException(status_code=404, detail=\"Evaluation not found\")\n    session.delete(evaluation)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"LR1/task1/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1","text":""},{"location":"LR1/task1/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u043b\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 API \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439.</p>"},{"location":"LR1/task1/#_2","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<p>\u0411\u044b\u043b\u0430 \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u043d\u0430 \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445:</p> <pre><code>temp_professions = [\n    {\n        \"id\": 1,\n        \"title\": \"\u0412\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\",\n        \"description\": \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\"\n    },\n    {\n        \"id\": 2,\n        \"title\": \"\u0414\u0435\u043b\u044c\u0444\u0438\u0441\u0442-\u0433\u0440\u0435\u0431\u0435\u0446\",\n        \"description\": \"\u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0439 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\"\n    }\n]\n\ntemp_bd = [\n    {\n        \"id\": 1,\n        \"race\": \"director\",\n        \"name\": \"\u041c\u0430\u0440\u0442\u044b\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439\",\n        \"level\": 12,\n        \"profession\": temp_professions[0],\n        \"skills\": [\n            {\n                \"id\": 1,\n                \"name\": \"\u041a\u0443\u043f\u043b\u0435-\u043f\u0440\u043e\u0434\u0430\u0436\u0430 \u043a\u043e\u043c\u043f\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432\",\n                \"description\": \"\"\n            },\n            {\n                \"id\": 2,\n                \"name\": \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430\",\n                \"description\": \"\"\n            }\n        ]\n    },\n    {\n        \"id\": 2,\n        \"race\": \"worker\",\n        \"name\": \"\u0410\u043d\u0434\u0440\u0435\u0439 \u041a\u043e\u0441\u044f\u043a\u0438\u043d\",\n        \"level\": 12,\n        \"profession\": temp_professions[1],\n        \"skills\": []\n    },\n]\n</code></pre> <p>\u0418 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b:</p> <pre><code>@app.get(\"/professions_list\")\ndef professions_list() -&gt; List[Profession]:\n    return temp_professions\n\n\n@app.get(\"/profession/{profession_id}\")\ndef profession_get(profession_id: int) -&gt; List[Profession]:\n    return [profession for profession in temp_professions if profession.get(\"id\") == profession_id]\n\n\n@app.post(\"/profession\")\ndef profession_create(profession: Profession) -&gt; TypedDict('Response', {\"status\": int, \"data\": Profession}):\n    profession_to_append = profession.model_dump()\n    temp_professions.append(profession_to_append)\n    return {\"status\": 200, \"data\": profession}\n\n\n@app.delete(\"/profession/delete{profession_id}\")\ndef profession_delete(profession_id: int):\n    for i, profession in enumerate(temp_professions):\n        if profession.get(\"id\") == profession_id:\n            temp_professions.pop(i)\n            break\n    return {\"status\": 201, \"message\": \"deleted\"}\n\n\n@app.put(\"/profession{profession_id}\")\ndef profession_update(profession_id: int, profession: Profession) -&gt; List[Profession]:\n    for prof in temp_professions:\n        if prof.get(\"id\") == profession_id:\n            profession_to_append = profession.model_dump()\n            temp_professions.remove(prof)\n            temp_professions.append(profession_to_append)\n    return temp_professions\n\n</code></pre>"},{"location":"LR1/task1/#_3","title":"\u0424\u0430\u0439\u043b\u044b","text":"<p><code>models.py</code></p> <pre><code>class Profession(BaseModel):\n    id: int\n    title: str\n    description: str\n\n\nclass Skill(BaseModel):\n    id: int\n    name: str\n    description: str\n\n\nclass RaceType(Enum):\n    director = \"director\"\n    worker = \"worker\"\n    junior = \"junior\"\n\n\nclass Warrior(BaseModel):\n    id: int\n    race: RaceType\n    name: str\n    level: int\n    profession: Profession\n    skills: Optional[List[Skill]] = []\n</code></pre> <p><code>main.py</code></p> <pre><code>app = FastAPI()\n\ntemp_professions = [\n    {\n        \"id\": 1,\n        \"title\": \"\u0412\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\",\n        \"description\": \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\"\n    },\n    {\n        \"id\": 2,\n        \"title\": \"\u0414\u0435\u043b\u044c\u0444\u0438\u0441\u0442-\u0433\u0440\u0435\u0431\u0435\u0446\",\n        \"description\": \"\u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0439 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\"\n    }\n]\n\ntemp_bd = [\n    {\n        \"id\": 1,\n        \"race\": \"director\",\n        \"name\": \"\u041c\u0430\u0440\u0442\u044b\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439\",\n        \"level\": 12,\n        \"profession\": temp_professions[0],\n        \"skills\": [\n            {\n                \"id\": 1,\n                \"name\": \"\u041a\u0443\u043f\u043b\u0435-\u043f\u0440\u043e\u0434\u0430\u0436\u0430 \u043a\u043e\u043c\u043f\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432\",\n                \"description\": \"\"\n            },\n            {\n                \"id\": 2,\n                \"name\": \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430\",\n                \"description\": \"\"\n            }\n        ]\n    },\n    {\n        \"id\": 2,\n        \"race\": \"worker\",\n        \"name\": \"\u0410\u043d\u0434\u0440\u0435\u0439 \u041a\u043e\u0441\u044f\u043a\u0438\u043d\",\n        \"level\": 12,\n        \"profession\": temp_professions[1],\n        \"skills\": []\n    },\n]\n\n\n@app.get(\"/warriors_list\")\ndef warriors_list() -&gt; List[Warrior]:\n    return temp_bd\n\n\n@app.get(\"/warrior/{warrior_id}\")\ndef warriors_get(warrior_id: int) -&gt; List[Warrior]:\n    return [warrior for warrior in temp_bd if warrior.get(\"id\") == warrior_id]\n\n\n@app.post(\"/warrior\")\ndef warriors_create(warrior: Warrior) -&gt; TypedDict('Response', {\"status\": int, \"data\": Warrior}):\n    warrior_to_append = warrior.model_dump()\n    temp_bd.append(warrior_to_append)\n    return {\"status\": 200, \"data\": warrior}\n\n\n@app.delete(\"/warrior/delete{warrior_id}\")\ndef warrior_delete(warrior_id: int):\n    for i, warrior in enumerate(temp_bd):\n        if warrior.get(\"id\") == warrior_id:\n            temp_bd.pop(i)\n            break\n    return {\"status\": 201, \"message\": \"deleted\"}\n\n\n@app.put(\"/warrior{warrior_id}\")\ndef warrior_update(warrior_id: int, warrior: Warrior) -&gt; List[Warrior]:\n    for war in temp_bd:\n        if war.get(\"id\") == warrior_id:\n            warrior_to_append = warrior.model_dump()\n            temp_bd.remove(war)\n            temp_bd.append(warrior_to_append)\n    return temp_bd\n\n\n@app.get(\"/professions_list\")\ndef professions_list() -&gt; List[Profession]:\n    return temp_professions\n\n\n@app.get(\"/profession/{profession_id}\")\ndef profession_get(profession_id: int) -&gt; List[Profession]:\n    return [profession for profession in temp_professions if profession.get(\"id\") == profession_id]\n\n\n@app.post(\"/profession\")\ndef profession_create(profession: Profession) -&gt; TypedDict('Response', {\"status\": int, \"data\": Profession}):\n    profession_to_append = profession.model_dump()\n    temp_professions.append(profession_to_append)\n    return {\"status\": 200, \"data\": profession}\n\n\n@app.delete(\"/profession/delete{profession_id}\")\ndef profession_delete(profession_id: int):\n    for i, profession in enumerate(temp_professions):\n        if profession.get(\"id\") == profession_id:\n            temp_professions.pop(i)\n            break\n    return {\"status\": 201, \"message\": \"deleted\"}\n\n\n@app.put(\"/profession{profession_id}\")\ndef profession_update(profession_id: int, profession: Profession) -&gt; List[Profession]:\n    for prof in temp_professions:\n        if prof.get(\"id\") == profession_id:\n            profession_to_append = profession.model_dump()\n            temp_professions.remove(prof)\n            temp_professions.append(profession_to_append)\n    return temp_professions\n</code></pre>"},{"location":"LR1/task2/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 2","text":""},{"location":"LR1/task2/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c API \u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u0438\u0439 \u0432\u043e\u0438\u043d\u043e\u0432 \u0438 \u0438\u0445 \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438, \u0432\u043b\u043e\u0436\u0435\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0443\u043c\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0432\u043e\u0438\u043d\u0430.</p>"},{"location":"LR1/task2/#_2","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<p>\u0411\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u0438\u0439:</p> <pre><code>class SkillWarriorLink(SQLModel, table=True):\n    skill_id: Optional[int] = Field(\n        default=None, foreign_key=\"skill.id\", primary_key=True\n    )\n    warrior_id: Optional[int] = Field(\n        default=None, foreign_key=\"warrior.id\", primary_key=True\n    )\n\n\nclass SkillDefault(SQLModel):\n    name: str\n    description: Optional[str] = \"\"\n\n\nclass Skill(SkillDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    warriors: Optional[List[\"Warrior\"]] = Relationship(\n        back_populates=\"skills\",\n        link_model=SkillWarriorLink\n    )\n</code></pre> <p>\u0418 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b:</p> <pre><code>@app.get(\"/skills_list\")\ndef skills_list(session=Depends(get_session)) -&gt; List[Skill]:\n    return session.exec(select(Skill)).all()\n\n\n@app.get(\"/skill/{skill_id}\")\ndef skill_get(skill_id: int, session=Depends(get_session)) -&gt; Skill:\n    skill = session.get(Skill, skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    return skill\n\n\n@app.post(\"/skill\")\ndef skill_create(skill: SkillDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Skill}):\n    skill = Skill.model_validate(skill)\n    session.add(skill)\n    session.commit()\n    session.refresh(skill)\n    return {\"status\": 200, \"data\": skill}\n\n\n@app.patch(\"/skill/{skill_id}\")\ndef skill_update(skill_id: int, skill: SkillDefault, session=Depends(get_session)) -&gt; Skill:\n    db_skill = session.get(Skill, skill_id)\n    if not db_skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    skill_data = skill.model_dump(exclude_unset=True)\n    for key, value in skill_data.items():\n        setattr(db_skill, key, value)\n    session.add(db_skill)\n    session.commit()\n    session.refresh(db_skill)\n    return db_skill\n\n\n@app.delete(\"/skill/delete/{skill_id}\")\ndef skill_delete(skill_id: int, session=Depends(get_session)):\n    skill = session.get(Skill, skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    session.delete(skill)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"},{"location":"LR1/task2/#_3","title":"\u0424\u0430\u0439\u043b\u044b","text":"<p><code>models.py</code></p> <pre><code>class RaceType(Enum):\n    director = \"director\"\n    worker = \"worker\"\n    junior = \"junior\"\n\n\nclass SkillWarriorLink(SQLModel, table=True):\n    skill_id: Optional[int] = Field(\n        default=None, foreign_key=\"skill.id\", primary_key=True\n    )\n    warrior_id: Optional[int] = Field(\n        default=None, foreign_key=\"warrior.id\", primary_key=True\n    )\n\n\nclass SkillDefault(SQLModel):\n    name: str\n    description: Optional[str] = \"\"\n\n\nclass Skill(SkillDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    warriors: Optional[List[\"Warrior\"]] = Relationship(\n        back_populates=\"skills\",\n        link_model=SkillWarriorLink\n    )\n\n\nclass ProfessionDefault(SQLModel):\n    title: str\n    description: str\n\n\nclass Profession(ProfessionDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    warriors_prof: List[\"Warrior\"] = Relationship(back_populates=\"profession\")\n\n\nclass WarriorDefault(SQLModel):\n    race: RaceType\n    name: str\n    level: int\n    profession_id: Optional[int] = Field(default=None, foreign_key=\"profession.id\")\n\n\nclass Warrior(WarriorDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    profession: Optional[Profession] = Relationship(back_populates=\"warriors_prof\")\n    skills: Optional[List[Skill]] = Relationship(back_populates=\"warriors\", link_model=SkillWarriorLink)\n\n\nclass WarriorProfessions(WarriorDefault):\n    profession: Optional[Profession] = None\n    skills: Optional[List[Skill]] = None\n\n\nclass WarriorCreateOrUpdate(WarriorDefault):\n    skills_ids: Optional[List[int]] = None\n</code></pre> <p><code>connection.py</code></p> <pre><code>load_dotenv()\ndb_url = os.getenv(\"DB_ADMIN\")\nengine = create_engine(db_url, echo=True)\n\n\ndef init_db():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre> <p><code>main.py</code></p> <pre><code>app = FastAPI()\n\ntemp_professions = [\n    {\n        \"id\": 1,\n        \"title\": \"\u0412\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\",\n        \"description\": \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\"\n    },\n    {\n        \"id\": 2,\n        \"title\": \"\u0414\u0435\u043b\u044c\u0444\u0438\u0441\u0442-\u0433\u0440\u0435\u0431\u0435\u0446\",\n        \"description\": \"\u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0439 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\"\n    }\n]\n\ntemp_bd = [\n    {\n        \"id\": 1,\n        \"race\": \"director\",\n        \"name\": \"\u041c\u0430\u0440\u0442\u044b\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439\",\n        \"level\": 12,\n        \"profession\": temp_professions[0],\n        \"skills\": [\n            {\n                \"id\": 1,\n                \"name\": \"\u041a\u0443\u043f\u043b\u0435-\u043f\u0440\u043e\u0434\u0430\u0436\u0430 \u043a\u043e\u043c\u043f\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432\",\n                \"description\": \"\"\n            },\n            {\n                \"id\": 2,\n                \"name\": \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430\",\n                \"description\": \"\"\n            }\n        ]\n    },\n    {\n        \"id\": 2,\n        \"race\": \"worker\",\n        \"name\": \"\u0410\u043d\u0434\u0440\u0435\u0439 \u041a\u043e\u0441\u044f\u043a\u0438\u043d\",\n        \"level\": 12,\n        \"profession\": temp_professions[1],\n        \"skills\": []\n    },\n]\n\n\n@app.get(\"/warriors_list\")\ndef warriors_list() -&gt; List[Warrior]:\n    return temp_bd\n\n\n@app.get(\"/warrior/{warrior_id}\")\ndef warriors_get(warrior_id: int) -&gt; List[Warrior]:\n    return [warrior for warrior in temp_bd if warrior.get(\"id\") == warrior_id]\n\n\n@app.post(\"/warrior\")\ndef warriors_create(warrior: Warrior) -&gt; TypedDict('Response', {\"status\": int, \"data\": Warrior}):\n    warrior_to_append = warrior.model_dump()\n    temp_bd.append(warrior_to_append)\n    return {\"status\": 200, \"data\": warrior}\n\n\n@app.delete(\"/warrior/delete{warrior_id}\")\ndef warrior_delete(warrior_id: int):\n    for i, warrior in enumerate(temp_bd):\n        if warrior.get(\"id\") == warrior_id:\n            temp_bd.pop(i)\n            break\n    return {\"status\": 201, \"message\": \"deleted\"}\n\n\n@app.put(\"/warrior{warrior_id}\")\ndef warrior_update(warrior_id: int, warrior: Warrior) -&gt; List[Warrior]:\n    for war in temp_bd:\n        if war.get(\"id\") == warrior_id:\n            warrior_to_append = warrior.model_dump()\n            temp_bd.remove(war)\n            temp_bd.append(warrior_to_append)\n    return temp_bd\n\n\n@app.get(\"/professions_list\")\ndef professions_list() -&gt; List[Profession]:\n    return temp_professions\n\n\n@app.get(\"/profession/{profession_id}\")\ndef profession_get(profession_id: int) -&gt; List[Profession]:\n    return [profession for profession in temp_professions if profession.get(\"id\") == profession_id]\n\n\n@app.post(\"/profession\")\ndef profession_create(profession: Profession) -&gt; TypedDict('Response', {\"status\": int, \"data\": Profession}):\n    profession_to_append = profession.model_dump()\n    temp_professions.append(profession_to_append)\n    return {\"status\": 200, \"data\": profession}\n\n\n@app.delete(\"/profession/delete{profession_id}\")\ndef profession_delete(profession_id: int):\n    for i, profession in enumerate(temp_professions):\n        if profession.get(\"id\") == profession_id:\n            temp_professions.pop(i)\n            break\n    return {\"status\": 201, \"message\": \"deleted\"}\n\n\n@app.put(\"/profession{profession_id}\")\ndef profession_update(profession_id: int, profession: Profession) -&gt; List[Profession]:\n    for prof in temp_professions:\n        if prof.get(\"id\") == profession_id:\n            profession_to_append = profession.model_dump()\n            temp_professions.remove(prof)\n            temp_professions.append(profession_to_append)\n    return temp_professions\n</code></pre>"},{"location":"LR1/task3/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3","text":""},{"location":"LR1/task3/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 alembic.ini URL \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e.env-\u0444\u0430\u0439\u043b\u0430 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043e\u0431\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443.</p>"},{"location":"LR1/task3/#_2","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<p>\u0411\u044b\u043b \u0438\u0437\u043c\u0435\u043d\u0435\u043d \u0444\u0430\u0439\u043b <code>env.py</code>:</p> <pre><code>import ...\n\nenv_path = Path(__file__).resolve().parents[3] / '.env'\nload_dotenv(dotenv_path=env_path)\n\nDATABASE_URL = os.getenv(\"DATABASE_URL\")\n\nif not DATABASE_URL:\n    raise RuntimeError(\"DATABASE_URL is not set in the environment!\")\n\nconfig = context.config\nconfig.set_main_option(\"sqlalchemy.url\", DATABASE_URL)\n\n...\n</code></pre>"},{"location":"LR1/task3/#_3","title":"\u0424\u0430\u0439\u043b\u044b","text":"<p><code>models.py</code></p> <pre><code>class RaceType(Enum):\n    director = \"director\"\n    worker = \"worker\"\n    junior = \"junior\"\n\n\nclass SkillWarriorLink(SQLModel, table=True):\n    skill_id: Optional[int] = Field(\n        default=None, foreign_key=\"skill.id\", primary_key=True\n    )\n    warrior_id: Optional[int] = Field(\n        default=None, foreign_key=\"warrior.id\", primary_key=True\n    )\n    level: int | None\n\n\nclass SkillDefault(SQLModel):\n    name: str\n    description: Optional[str] = \"\"\n\n\nclass Skill(SkillDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    warriors: Optional[List[\"Warrior\"]] = Relationship(\n        back_populates=\"skills\",\n        link_model=SkillWarriorLink\n    )\n\n\nclass ProfessionDefault(SQLModel):\n    title: str\n    description: str\n\n\nclass Profession(ProfessionDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    warriors_prof: List[\"Warrior\"] = Relationship(back_populates=\"profession\")\n\n\nclass WarriorDefault(SQLModel):\n    race: RaceType\n    name: str\n    level: int\n    profession_id: Optional[int] = Field(default=None, foreign_key=\"profession.id\")\n\n\nclass Warrior(WarriorDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    profession: Optional[Profession] = Relationship(back_populates=\"warriors_prof\")\n    skills: Optional[List[Skill]] = Relationship(back_populates=\"warriors\", link_model=SkillWarriorLink)\n\n\nclass WarriorProfessions(WarriorDefault):\n    profession: Optional[Profession] = None\n    skills: Optional[List[Skill]] = None\n\n\nclass WarriorCreateOrUpdate(WarriorDefault):\n    skills_ids: Optional[List[int]] = None\n</code></pre> <p><code>connection.py</code></p> <pre><code>load_dotenv()\ndb_url = os.getenv(\"DB_ADMIN\")\nengine = create_engine(db_url, echo=True)\n\n\ndef init_db():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre> <p><code>main.py</code></p> <pre><code>app = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    init_db()\n\n\n@app.get(\"/warriors_list\")\ndef warriors_list(session=Depends(get_session)) -&gt; List[Warrior]:\n    return session.exec(select(Warrior)).all()\n\n\n@app.post(\"/warrior\")\ndef warriors_create(warrior: WarriorCreateOrUpdate, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Warrior}):\n    warrior_data = warrior.model_dump(exclude={\"skills_ids\"})\n    warrior_obj = Warrior(**warrior_data)\n\n    if warrior.skills_ids:\n        skills = session.exec(select(Skill).where(Skill.id.in_(warrior.skills_ids))).all()\n        warrior_obj.skills = skills\n\n    session.add(warrior_obj)\n    session.commit()\n    session.refresh(warrior_obj)\n    return {\"status\": 200, \"data\": warrior_obj}\n\n\n@app.get(\"/warrior/{warrior_id}\", response_model=WarriorProfessions)\ndef warriors_get(warrior_id: int, session=Depends(get_session)) -&gt; Warrior:\n    warrior = session.get(Warrior, warrior_id)\n    if not warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n    return warrior\n\n\n@app.patch(\"/warrior/{warrior_id}\")\ndef warrior_update(warrior_id: int, warrior: WarriorCreateOrUpdate, session=Depends(get_session)) -&gt; Warrior:\n    db_warrior = session.get(Warrior, warrior_id)\n    if not db_warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n\n    warrior_data = warrior.model_dump(exclude_unset=True, exclude={\"skills_ids\"})\n    for key, value in warrior_data.items():\n        setattr(db_warrior, key, value)\n\n    # \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043b\u0438 \u043d\u043e\u0432\u044b\u0435 skills_ids \u2014 \u043c\u0435\u043d\u044f\u0435\u043c\n    if warrior.skills_ids is not None:\n        skills = session.exec(select(Skill).where(Skill.id.in_(warrior.skills_ids))).all()\n        db_warrior.skills = skills\n\n    session.add(db_warrior)\n    session.commit()\n    session.refresh(db_warrior)\n    return db_warrior\n\n\n@app.delete(\"/warrior/delete/{warrior_id}\")\ndef warrior_delete(warrior_id: int, session=Depends(get_session)):\n    warrior = session.get(Warrior, warrior_id)\n    if not warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n    session.delete(warrior)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.get(\"/professions_list\")\ndef professions_list(session=Depends(get_session)) -&gt; List[Profession]:\n    return session.exec(select(Profession)).all()\n\n\n@app.get(\"/profession/{profession_id}\")\ndef profession_get(profession_id: int, session=Depends(get_session)) -&gt; Profession:\n    prof = session.get(Profession, profession_id)\n    if not prof:\n        raise HTTPException(status_code=404, detail=\"Profession not found\")\n    return prof\n\n\n@app.post(\"/profession\")\ndef profession_create(prof: ProfessionDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Profession}):\n    prof = Profession.model_validate(prof)\n    session.add(prof)\n    session.commit()\n    session.refresh(prof)\n    return {\"status\": 200, \"data\": prof}\n\n\n@app.patch(\"/profession/{profession_id}\")\ndef profession_update(profession_id: int, prof: ProfessionDefault, session=Depends(get_session)) -&gt; Profession:\n    db_prof = session.get(Profession, profession_id)\n    if not db_prof:\n        raise HTTPException(status_code=404, detail=\"Profession not found\")\n    prof_data = prof.model_dump(exclude_unset=True)\n    for key, value in prof_data.items():\n        setattr(db_prof, key, value)\n    session.add(db_prof)\n    session.commit()\n    session.refresh(db_prof)\n    return db_prof\n\n\n@app.delete(\"/profession/delete/{profession_id}\")\ndef profession_delete(profession_id: int, session=Depends(get_session)):\n    prof = session.get(Profession, profession_id)\n    if not prof:\n        raise HTTPException(status_code=404, detail=\"Profession not found\")\n    session.delete(prof)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.get(\"/skills_list\")\ndef skills_list(session=Depends(get_session)) -&gt; List[Skill]:\n    return session.exec(select(Skill)).all()\n\n\n@app.get(\"/skill/{skill_id}\")\ndef skill_get(skill_id: int, session=Depends(get_session)) -&gt; Skill:\n    skill = session.get(Skill, skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    return skill\n\n\n@app.post(\"/skill\")\ndef skill_create(skill: SkillDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Skill}):\n    skill = Skill.model_validate(skill)\n    session.add(skill)\n    session.commit()\n    session.refresh(skill)\n    return {\"status\": 200, \"data\": skill}\n\n\n@app.patch(\"/skill/{skill_id}\")\ndef skill_update(skill_id: int, skill: SkillDefault, session=Depends(get_session)) -&gt; Skill:\n    db_skill = session.get(Skill, skill_id)\n    if not db_skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    skill_data = skill.model_dump(exclude_unset=True)\n    for key, value in skill_data.items():\n        setattr(db_skill, key, value)\n    session.add(db_skill)\n    session.commit()\n    session.refresh(db_skill)\n    return db_skill\n\n\n@app.delete(\"/skill/delete/{skill_id}\")\ndef skill_delete(skill_id: int, session=Depends(get_session)):\n    skill = session.get(Skill, skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    session.delete(skill)\n    session.commit()\n    return {\"ok\": True}\n</code></pre>"}]}